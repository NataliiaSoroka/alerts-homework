{"version":3,"sources":["Alerts.js","hoc/WithUnmount.js","AlertsCreate.js","hoc/WithPortal.js","App.js","serviceWorker.js","index.js"],"names":["AutoUnmountedAlert","time","Component","_React$Component","SelfUnmountALert","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","visible","inherits","createClass","key","value","_this2","setTimeout","setState","react_default","a","createElement","React","WithUnmount","_ref","alert","Alerts","_ref2","alerts","map","i","concat","defaultProps","domEl","BaseComponent","_Component","WithPortalHOC","apply","arguments","createPortal","WithPortal","document","querySelector","PureAlerts","AlertCreate","inputValue","textInput","createRef","focusTextInput","bind","assertThisInitialized","e","target","keyCode","addAllert","current","focus","toConsumableArray","className","type","onChange","onKeyDown","ref","onClick","disabled","AlertsCreate_Alerts","App","AlertsCreate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18a186ea.chunk.js","sourcesContent":["import React from 'react';\nimport WithUnmount from './hoc/WithUnmount';\n\nconst Alert = ({ alert }) => <div>{alert}</div>\n\nconst AutoUnmountedAlert = WithUnmount(4000)(Alert)\n\nconst Alerts = ({ alerts }) => alerts.map((alert, i) => <AutoUnmountedAlert alert={alert} key={`${alert}-${i}`} />)\n\n\n\nAlerts.defaultProps = {\n  alerts: []\n};\n\nexport default Alerts;\n","import React from \"react\";\n\nconst WithUnmount = time => Component => {\n  class SelfUnmountALert extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { visible: true }\n    }\n\n    componentDidMount(){\n      setTimeout(() => {\n        this.setState({ visible: false })\n      }, time)\n    }\n\n    render () {\n      return this.state.visible && <Component {...this.props} />\n    }\n  }\n\n  return SelfUnmountALert\n}\n\nexport default WithUnmount;","import React, { Component, createRef } from 'react';\nimport PureAlerts from './Alerts';\nimport WithPortal from \"./hoc/WithPortal\";\n\nconst alertsListEl = document.querySelector('.alerts-list');\nconst Alerts = WithPortal(alertsListEl)(PureAlerts)\n\nclass AlertCreate extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        inputValue: '',\n        alerts: []\n      }\n      this.textInput = createRef();\n      this.focusTextInput = this.focusTextInput.bind(this);\n    }\n  \n    onChange(e) {\n      this.setState({ inputValue: e.target.value });\n    }\n    onKeyDown(e) {\n      if (e.keyCode === 13 && this.state.inputValue) {\n        this.addAllert();\n      }\n    }\n  \n    focusTextInput() {\n      this.textInput.current.focus();\n    }\n  \n    addAllert() {\n      this.setState({\n        alerts: [...this.state.alerts, this.state.inputValue],\n        inputValue: ''\n      })\n      this.focusTextInput();\n    }\n  \n    componentDidMount() {\n      this.focusTextInput();\n    }\n  \n    render() {\n      return (\n        <div className=\"input-alert\">\n          <input \n            value={this.state.inputValue} \n            type=\"text\" \n            onChange={e => this.onChange(e)}\n            onKeyDown={e => this.onKeyDown(e)}\n            ref={this.textInput}\n          />\n          <button \n            onClick={() => this.addAllert()} \n            disabled={ !this.state.inputValue }\n          > \n            Add alert \n          </button>\n          <Alerts alerts={this.state.alerts} />\n        </div>\n      );\n    }\n  }\n\nexport default AlertCreate;","import React, { Component } from 'react';\nimport { createPortal } from \"react-dom\";\n\nconst WithPortal = domEl => BaseComponent => {\n    class WithPortalHOC extends Component {\n        render () {\n        return (createPortal(<BaseComponent {...this.props} />, domEl))\n        }\n    }\n\n    return WithPortalHOC;\n} \n  \n\n  export default WithPortal;","import React, { Component } from 'react';\nimport AlertCreate from './AlertsCreate';\n\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AlertCreate />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}